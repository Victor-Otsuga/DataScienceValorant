import streamlit as st
import pandas as pd
import numpy as np
import plotly.express as px
import plotly.graph_objects as go
from scipy.stats import norm, poisson

# Configura√ß√£o da p√°gina
st.set_page_config(page_title="An√°lise de Dados - Valorant", layout="wide")

# T√≠tulo da p√°gina
st.title("An√°lise de Dados: Armas do Valorant")

# Carregar os dados do arquivo CSV
@st.cache_data  
def load_data():
    try:
        df = pd.read_csv("./valorant-stats.csv")
        return df
    except Exception as e:
        st.error(f"Erro ao carregar o arquivo: {e}")
        return pd.DataFrame() 

df = load_data()


if df.empty:
    st.stop()  

# Criar abas
tab1, tab2, tab3 = st.tabs(["üìä An√°lise Inicial", "üìà Medidas e Correla√ß√£o", "üé≤ Distribui√ß√µes Probabil√≠sticas"])

# Aba 1: An√°lise Inicial
with tab1:
    st.header("1. Apresenta√ß√£o dos Dados")
    st.write("""
    Este conjunto de dados cont√©m informa√ß√µes sobre as armas dispon√≠veis no jogo Valorant. 
    Cada arma possui atributos como tipo, pre√ßo, taxa de disparo, penetra√ß√£o em paredes, 
    capacidade do carregador e danos em diferentes dist√¢ncias (curta, m√©dia e longa).
    """)
    st.write("Amostra dos dados:")
    st.write(df.head())

    # Classifica√ß√£o das vari√°veis
    st.subheader("Classifica√ß√£o das Vari√°veis")
    st.write("""
    Abaixo est√° a classifica√ß√£o de cada vari√°vel do conjunto de dados:
    """)

    # Dicion√°rio com a classifica√ß√£o das vari√°veis
    variable_types = {
        "Name": "Qualitativa Nominal",
        "Weapon Type": "Qualitativa Nominal",
        "Price": "Quantitativa Discreta",
        "Fire Rate": "Quantitativa Cont√≠nua",
        "Wall Penetration": "Qualitativa Ordinal",  
        "Magazine Capacity": "Quantitativa Discreta",
        "HDMG_0": "Quantitativa Cont√≠nua",
        "BDMG_0": "Quantitativa Cont√≠nua",
        "LDMG_0": "Quantitativa Cont√≠nua",
        "HDMG_1": "Quantitativa Cont√≠nua",
        "BDMG_1": "Quantitativa Cont√≠nua",
        "LDMG_1": "Quantitativa Cont√≠nua",
        "HDMG_2": "Quantitativa Cont√≠nua",
        "BDMG_2": "Quantitativa Cont√≠nua",
        "LDMG_2": "Quantitativa Cont√≠nua"
    }

    # Exibir a classifica√ß√£o em uma tabela
    classification_df = pd.DataFrame({
        "Vari√°vel": list(variable_types.keys()),
        "Tipo": list(variable_types.values())
    })
    st.write(classification_df)

    # Explica√ß√£o dos tipos de vari√°veis
    st.subheader("Explica√ß√£o dos Tipos de Vari√°veis")
    st.write("""
    - **Qualitativa Nominal**: Vari√°veis que representam categorias sem ordem espec√≠fica (ex: nome da arma, tipo de arma).
    - **Qualitativa Ordinal**: Vari√°veis categ√≥ricas que possuem uma ordem ou hierarquia espec√≠fica (ex: n√≠vel de penetra√ß√£o em paredes: Baixo, M√©dio, Alto).
    - **Quantitativa Discreta**: Vari√°veis num√©ricas que assumem valores inteiros (ex: pre√ßo, capacidade do carregador).
    - **Quantitativa Cont√≠nua**: Vari√°veis num√©ricas que assumem valores decimais (ex: taxa de disparo, dano em diferentes dist√¢ncias).
    """)

    # Perguntas de an√°lise
    st.subheader("Perguntas de An√°lise")
    st.write("""
    1. Qual √© a distribui√ß√£o de pre√ßos das armas por tipo?
    2. Qual arma tem o maior dano em curta dist√¢ncia (HDMG_0)?
    3. Como a taxa de disparo (Fire Rate) varia entre os tipos de armas?
    4. Qual √© a rela√ß√£o entre o pre√ßo da arma e seu dano em diferentes dist√¢ncias?
    5. Quais armas oferecem o melhor custo-benef√≠cio em termos de dano por pre√ßo?
    """)

    # An√°lise 1: Distribui√ß√£o de pre√ßos por tipo de arma
    st.header("2. Distribui√ß√£o de Pre√ßos por Tipo de Arma")
    fig1 = px.box(df, x="Weapon Type", y="Price", title="Distribui√ß√£o de Pre√ßos por Tipo de Arma")
    st.plotly_chart(fig1)
    st.write("""
    - **Observa√ß√£o**: As armas do tipo Sniper e Heavy tendem a ser as mais caras, enquanto as Sidearms s√£o as mais baratas.
    """)

    # An√°lise 2: Arma com maior dano em curta dist√¢ncia
    st.header("3. Arma com Maior Dano em Curta Dist√¢ncia (HDMG_0)")
    max_damage_weapon = df.loc[df["HDMG_0"].idxmax()]
    st.write(f"A arma com maior dano em curta dist√¢ncia √© **{max_damage_weapon['Name']}** com **{max_damage_weapon['HDMG_0']}** de dano.")

    # An√°lise 3: Taxa de disparo por tipo de arma
    st.header("4. Taxa de Disparo por Tipo de Arma")
    fig2 = px.bar(df, x="Weapon Type", y="Fire Rate", title="Taxa de Disparo por Tipo de Arma", color="Weapon Type")
    st.plotly_chart(fig2)
    st.write("""
    - **Observa√ß√£o**: As SMGs t√™m a maior taxa de disparo, enquanto as Snipers t√™m a menor.
    """)

    # An√°lise 4: Rela√ß√£o entre pre√ßo e dano
    st.header("5. Rela√ß√£o entre Pre√ßo e Dano")
    st.subheader("Dano em Curta Dist√¢ncia (HDMG_0) vs Pre√ßo")
    fig3 = px.scatter(df, x="Price", y="HDMG_0", color="Weapon Type", title="Rela√ß√£o entre Pre√ßo e Dano em Curta Dist√¢ncia")
    st.plotly_chart(fig3)
    st.write("""
    - **Observa√ß√£o**: Em geral, armas mais caras tendem a causar mais dano, mas h√° exce√ß√µes, como a Sheriff, que √© relativamente barata e causa alto dano.
    """)

    # An√°lise 5: Custo-benef√≠cio (Dano por Pre√ßo)
    st.header("6. Custo-Benef√≠cio: Dano por Pre√ßo")
    df["Damage per Price"] = df["HDMG_0"] / df["Price"]
    fig4 = px.bar(df, x="Name", y="Damage per Price", title="Dano por Pre√ßo (Custo-Benef√≠cio)", color="Weapon Type")
    st.plotly_chart(fig4)
    st.write("""
    - **Observa√ß√£o**: A **Shorty** oferece o melhor custo-benef√≠cio em termos de dano por pre√ßo, enquanto a **Operator** tem o pior.
    """)

# Aba 2: Medidas e Correla√ß√£o
with tab2:
    st.header("2. Medidas Centrais, Dispers√£o e Correla√ß√£o")

    # C√°lculo de medidas centrais
    st.subheader("Medidas Centrais")
    st.write("""
    Aqui est√£o as medidas centrais (m√©dia, mediana e moda) para as vari√°veis num√©ricas:
    """)

    # Selecionar colunas num√©ricas
    numeric_columns = df.select_dtypes(include=[np.number]).columns

    # Calcular m√©dia, mediana e moda
    mean_values = df[numeric_columns].mean()
    median_values = df[numeric_columns].median()
    mode_values = df[numeric_columns].mode().iloc[0]  # Pega a primeira moda, caso haja m√∫ltiplas

    # Exibir em uma tabela
    measures_df = pd.DataFrame({
        "M√©dia": mean_values,
        "Mediana": median_values,
        "Moda": mode_values
    })
    st.write(measures_df)

    # Discuss√£o sobre a distribui√ß√£o dos dados
    st.subheader("Distribui√ß√£o dos Dados")
    st.write("""
    A distribui√ß√£o dos dados pode ser visualizada atrav√©s de histogramas. Abaixo est√£o os histogramas para algumas vari√°veis num√©ricas:
    """)

    # Selecionar vari√°veis para histogramas
    selected_columns = st.multiselect(
        "Selecione as vari√°veis para visualizar a distribui√ß√£o:",
        numeric_columns,
        default=["Price", "Fire Rate", "HDMG_0"]
    )

    # Plotar histogramas
    for col in selected_columns:
        fig = px.histogram(df, x=col, title=f"Distribui√ß√£o de {col}", nbins=20)
        st.plotly_chart(fig)
        st.write(f"**{col}**: M√©dia = {mean_values[col]:.2f}, Mediana = {median_values[col]:.2f}, Moda = {mode_values[col]}")

    # Medidas de dispers√£o
    st.subheader("Medidas de Dispers√£o")
    st.write("""
    A dispers√£o dos dados pode ser medida atrav√©s do desvio padr√£o e da vari√¢ncia. Abaixo est√£o os valores para as vari√°veis num√©ricas:
    """)

    # Calcular desvio padr√£o e vari√¢ncia
    std_values = df[numeric_columns].std()
    var_values = df[numeric_columns].var()

    # Exibir em uma tabela
    dispersion_df = pd.DataFrame({
        "Desvio Padr√£o": std_values,
        "Vari√¢ncia": var_values
    })
    st.write(dispersion_df)

    # Correla√ß√£o entre vari√°veis
    st.subheader("Correla√ß√£o entre Vari√°veis")
    st.write("""
    A correla√ß√£o entre as vari√°veis num√©ricas pode ser visualizada atrav√©s de uma matriz de correla√ß√£o. 
    Valores pr√≥ximos de 1 ou -1 indicam uma forte correla√ß√£o positiva ou negativa, respectivamente.
    """)

    # Calcular matriz de correla√ß√£o
    corr_matrix = df[numeric_columns].corr()

    # Exibir matriz de correla√ß√£o com um heatmap
    fig_corr = px.imshow(
        corr_matrix,
        text_auto=True,
        title="Matriz de Correla√ß√£o",
        labels=dict(x="Vari√°vel", y="Vari√°vel", color="Correla√ß√£o")
    )
    st.plotly_chart(fig_corr)

    # Discuss√£o sobre correla√ß√µes
    st.write("""
    **Discuss√£o sobre Correla√ß√µes**:
    - **Pre√ßo e Dano (HDMG_0)**: Espera-se uma correla√ß√£o positiva, pois armas mais caras tendem a causar mais dano.
    - **Taxa de Disparo e Dano**: Pode haver uma correla√ß√£o negativa, j√° que armas com alta taxa de disparo geralmente causam menos dano por tiro.
    - **Capacidade do Carregador e Pre√ßo**: Pode haver uma correla√ß√£o positiva, pois armas com maior capacidade tendem a ser mais caras.
    """)

    # Identifica√ß√£o de correla√ß√µes fortes
    strong_correlations = corr_matrix.abs() > 0.7  # Definindo um limiar para correla√ß√µes fortes
    strong_correlations = strong_correlations.stack().reset_index()
    strong_correlations = strong_correlations[strong_correlations[0] & strong_correlations['level_0'] != strong_correlations['level_1']]

    if not strong_correlations.empty:
        st.write("**Correla√ß√µes Fortes Identificadas**:")
        st.write(strong_correlations[['level_0', 'level_1']].rename(columns={'level_0': 'Vari√°vel 1', 'level_1': 'Vari√°vel 2'}))
    else:
        st.write("Nenhuma correla√ß√£o forte foi identificada.")

# Aba 3: Distribui√ß√µes Probabil√≠sticas
with tab3:
    st.header("3. Aplica√ß√£o de Distribui√ß√µes Probabil√≠sticas")

    # Escolha da vari√°vel para an√°lise
    st.subheader("Escolha da Vari√°vel")
    st.write("""
    Selecione uma vari√°vel num√©rica para aplicar as distribui√ß√µes probabil√≠sticas:
    """)
    selected_col = st.selectbox(
        "Selecione uma vari√°vel:",
        numeric_columns,
        index=numeric_columns.get_loc("HDMG_0")  # Seleciona "HDMG_0" por padr√£o
    )

    if selected_col:
        data = df[selected_col].dropna()

        # Distribui√ß√£o Normal
        st.subheader("Distribui√ß√£o Normal")
        st.write("""
        **Justificativa**: A distribui√ß√£o Normal √© adequada para vari√°veis cont√≠nuas que tendem a se concentrar em torno de uma m√©dia. 
        No caso de **HDMG_0** (dano em curta dist√¢ncia), espera-se que os valores se distribuam de forma sim√©trica em torno de um valor central.
        """)

        # Ajustar uma distribui√ß√£o normal aos dados
        mu, sigma = norm.fit(data)
        x = np.linspace(min(data), max(data), 100)
        pdf = norm.pdf(x, mu, sigma)

        # Plotar histograma e curva normal
        fig_norm = go.Figure()
        fig_norm.add_trace(go.Histogram(x=data, name="Histograma", nbinsx=20, histnorm="probability density"))
        fig_norm.add_trace(go.Scatter(x=x, y=pdf, mode="lines", name="Distribui√ß√£o Normal", line=dict(color="red")))
        fig_norm.update_layout(
            title=f"Distribui√ß√£o Normal Ajustada para {selected_col}",
            xaxis_title=selected_col,
            yaxis_title="Densidade de Probabilidade"
        )
        st.plotly_chart(fig_norm)

        st.write(f"**M√©dia (Œº)**: {mu:.2f}")
        st.write(f"**Desvio Padr√£o (œÉ)**: {sigma:.2f}")
        st.write("""
        **Interpreta√ß√£o**: A curva vermelha representa a distribui√ß√£o normal ajustada aos dados. 
        Se os dados seguirem uma distribui√ß√£o normal, a curva deve se sobrepor bem ao histograma.
        """)

        # Distribui√ß√£o de Poisson
        st.subheader("Distribui√ß√£o de Poisson")
        st.write("""
        **Justificativa**: A distribui√ß√£o de Poisson √© adequada para modelar a ocorr√™ncia de eventos raros em um intervalo fixo. 
        No caso de **Magazine Capacity** (capacidade do carregador), podemos modelar a frequ√™ncia de armas com determinada capacidade.
        """)

        # Ajustar uma distribui√ß√£o de Poisson aos dados
        lambda_est = data.mean()
        x_poisson = np.arange(0, int(data.max()))
        pmf = poisson.pmf(x_poisson, lambda_est)

        # Plotar distribui√ß√£o de Poisson
        fig_poisson = go.Figure()
        fig_poisson.add_trace(go.Bar(x=x_poisson, y=pmf, name="Distribui√ß√£o de Poisson"))
        fig_poisson.update_layout(
            title=f"Distribui√ß√£o de Poisson Ajustada para {selected_col}",
            xaxis_title=selected_col,
            yaxis_title="Probabilidade"
        )
        st.plotly_chart(fig_poisson)

        st.write(f"**Taxa M√©dia (Œª)**: {lambda_est:.2f}")
        st.write("""
        **Interpreta√ß√£o**: A distribui√ß√£o de Poisson mostra a probabilidade de ocorr√™ncia de diferentes valores de capacidade do carregador. 
        Valores pr√≥ximos √† taxa m√©dia (Œª) t√™m maior probabilidade.
        """)